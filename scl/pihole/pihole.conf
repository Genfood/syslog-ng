#############################################################################
# Copyright (c) 2023 Attila Szakacs
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 as published
# by the Free Software Foundation, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# As an additional exemption you are allowed to compile & link against the
# OpenSSL libraries as published by the OpenSSL project. See the file
# COPYING for details.
#
#############################################################################

block parser pihole_ftl()
{
  channel {
    parser {
      regexp-parser(
        patterns('^\[([^ ]+ [^ ]+) [^ \]]+\] (FATAL:|ERR:|ERROR:|Error:|WARN:|WARNING:|Warning:|Notice:|INFO:|DEBUG:|) ?(?<MESSAGE>.*)')
      );
      date-parser(
        template("$1")
        format("%Y-%m-%d %H:%M:%S.%f")
      );
    };

    rewrite {
      set("Pi-hole" value("APP"));
    };

    if ("$2" eq "") {
      # No severity was found.
    } elif (match("FATAL" value("2"))) {
      rewrite { set-severity("emergency"); };
    } elif (match("^(ERR|ERROR|Error):$" value("2"))) {
      rewrite { set-severity("error"); };
    } elif (match("^(WARN|WARNING|Warning):$" value("2"))) {
      rewrite { set-severity("warning"); };
    } elif (match("^(Notice):$" value("2"))) {
      rewrite { set-severity("notice"); };
    } elif (match("^(INFO):$" value("2"))) {
      rewrite { set-severity("info"); };
    } elif (match("^(DEBUG):$" value("2"))) {
      rewrite { set-severity("debug"); };
    } else {};
  };
};

block source pihole_ftl(
  dir("/var/log/pihole")
  ...)
{
  channel {
    source { file("`dir`/FTL.log" flags(no-parse) `__VARARGS__`); };
    parser { pihole_ftl(); };
  };
};
